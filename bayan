#!/bin/bash
BAYAN_PATH=${HOME}/bayan
source ${BAYAN_PATH}/bayan.conf

batman_begins() {
    #Dark Knight Rises
    ip link set mtu 1532 dev $mesh_if
    iwconfig $mesh_if mode ad-hoc essid bnets-mesh ap 00:01:02:03:04:05 channel 1
    batctl if add $mesh_if
    ip link set up dev $mesh_if
    ip link set up dev ${neigh_if}
    ip addr add ${mesh_ip} dev ${neigh_if}
    ip route add ${mesh_ip%.*}.0/24 dev ${neigh_if} proto kernel scope link src ${mesh_ip}
}

clean_table() {
    #Removes chains and rules created by bayanihanets
	gw_count=`wc -l ${BAYAN_PATH}/conn.lst | awk '{print $1}'`
	for N in $(seq 1 $gw_count)
	do
		iptables -t mangle -D PREROUTING 1
		iptables -t mangle -F MARK${N}
		iptables -t mangle -X MARK${N}
	done
}

restore() {
    #Revert back to pre-loadsharing state
    ip rule flush && ${BAYAN_PATH}/iprule.ORIGINAL
    clean_table
    iptables-restore < ${BAYAN_PATH}/iptables.ORIGINAL
    gw_count=`wc -l ${BAYAN_PATH}/conn.lst | awk '{print $1}'`
    for N in $(seq 1 $gw_count)
    do
        ip route flush table ${N}
    done
}

load() {
    #Balance load among the hosts in conn.lst
    iptables -t nat -A POSTROUTING -j MASQUERADE
    gw_count=`wc -l ${BAYAN_PATH}/conn.lst | awk '{print $1}'`
    for N in $(seq 1 $gw_count)
    do
        gw=$(cat ${BAYAN_PATH}/conn.lst | awk -v n="$N" 'NR==n {print $1}')
        intf=$(cat ${BAYAN_PATH}/conn.lst | awk -v n="$N" 'NR==n {print $2}')
        prob=$(cat ${BAYAN_PATH}/conn.lst | awk -v n="$N" 'NR==n {print $3}')

        ip rule add fwmark ${N} table ${N}
        ip route add ${mesh_ip%.*}.0/24 dev ${neigh_if} proto kernel scope link src ${mesh_ip} table ${N}
        ip route add ${homenet_ip%.*}.0/24 dev ${homenet_if} proto kernel scope link src ${homenet_ip} table ${N}
        ip route add default via ${gw} dev ${intf} table ${N}

        iptables -t mangle -N MARK${N}
        iptables -t nat -N MARK${N}
        iptables -t nat -I POSTROUTING ${N} -m mark --mark ${N} -j MARK${N}
        iptables -t mangle -A MARK${N} -j MARK --set-mark ${N}
        iptables -t mangle -A MARK${N} -j CONNMARK --save-mark
        iptables -t mangle -I PREROUTING ${N} -i ${client_if} -m conntrack --ctstate     NEW -m statistic --mode random --probability ${prob} -j MARK${N}
    done

    iptables-save > ${BAYAN_PATH}/bayan_iptables

    echo "#!/bin/bash" > ${BAYAN_PATH}/bayan_iprules
    ip rule show | sed 's/[:-]/ /g' | awk '$0="ip rule add priority "$0' >> ${BAYAN_PATH}/bayan_iprules
    chmod +x ${BAYAN_PATH}/bayan_iprules
}

case "$1" in
    "start")
	ip rule flush && ${BAYAN_PATH}/bayan_iprules
        iptables-restore < ${BAYAN_PATH}/bayan_iptables
        if [[ "$neigh_if" == "bat0" ]]; then
            batman_begins
        fi
        gw_count=`wc -l ${BAYAN_PATH}/conn.lst | awk '{print $1}'`
        for N in $(seq 1 $gw_count)
        do
	    gw=$(cat ${BAYAN_PATH}/conn.lst | awk -v n="$N" 'NR==n {print $1}')
	    intf=$(cat ${BAYAN_PATH}/conn.lst | awk -v n="$N" 'NR==n {print $2}')
            ip route add ${mesh_ip%.*}.0/24 dev ${neigh_if} proto kernel scope link src ${mesh_ip} table ${N}
            ip route add ${homenet_ip%.*}.0/24 dev ${homenet_if} proto kernel scope link src ${homenet_ip} table ${N}
            ip route add default via ${gw} dev ${intf} table ${N}
        done
        create_ap ${ap_if} ${homenet_if} ${ssid} ${ap_pwd} &
    ;;

    "install")
        iptables-save > ${BAYAN_PATH}/iptables.ORIGINAL
        echo "#!/bin/bash" > ${BAYAN_PATH}/iprule.ORIGINAL
        ip rule show | sed 's/[:-]/ /g' | awk '$0="ip rule add priority "$0' >> ${BAYAN_PATH}/iprule.ORIGINAL
        chmod +x ${BAYAN_PATH}/iprule.ORIGINAL
        if [[ "$neigh_if" == "bat0" ]]; then
            batman_begins
        fi
        load
        ln -s ${BAYAN_PATH}/bayan /usr/local/sbin
    ;;

    "uninstall")
        restore
        rm /usr/local/sbin/bayan
        rm ${BAYAN_PATH}/bayan_iptables
        rm ${BAYAN_PATH}/bayan_iprules
        rm ${BAYAN_PATH}/iptables.ORIGINAL
        rm ${BAYAN_PATH}/iprule.ORIGINAL
    ;;

    "add")
        if [ $# -ne 5 ]; then
            echo -e "Insufficient arguments. \nex: bayan add [new_ip] [new_inteface] [new_probability] [new_hostname]"
            exit 1
        fi
        restore
        echo "${2} ${3} ${4} ${5}" >> ${BAYAN_PATH}/conn.lst
        load
    ;;

    "remove")
        if [ $# -ne 2 ]; then
            echo -e "Insufficient arguments. \nex: bayan remove [conn_id]"
            exit 1
        fi
        if [ "$2" -eq 1 ]; then
            echo "You can't delete conn#1"
            exit 0
        fi
        restore
        sed -i $2d ${BAYAN_PATH}/conn.lst
        load
    ;;

    "disable")
        if [ $# -ne 2 ]; then
            echo -e "Insufficient arguments. \nex: bayan disable [conn_id]"
            exit 1
        fi
        iptables -t mangle -R PREROUTING $2 -i ${client_if} -m conntrack --ctstate     NEW -m statistic --mode random --probability 0 -j MARK$2
    ;;

    "enable")
        if [ $# -ne 2 ]; then
            echo -e "Insufficient arguments. \nex: bayan enable [conn_id]"
            exit 1
        fi
        gw=$(sed "$2q;d" ${BAYAN_PATH}/conn.lst  | awk '{print $1}')
        intf=$(sed "$2q;d" ${BAYAN_PATH}/conn.lst  | awk '{print $2}')
        prob=$(sed "$2q;d" ${BAYAN_PATH}/conn.lst  | awk '{print $3}')
        ip route replace default via ${gw} dev $intf table $2
        iptables -t mangle -R PREROUTING $2 -i ${client_if} -m conntrack --ctstate     NEW -m statistic --mode random --probability ${prob} -j MARK$2
    ;;

    "change")
        if [ $# -ne 6 ]; then
            echo -e "Insufficient arguments. \nex: bayan add [old_id] [new_ip] [new_inteface] [new_probability] [new_hostname]"
            exit 1
        fi
        old=$(sed "$2q;d" ${BAYAN_PATH}/conn.lst)
        sed -i "s/${old}/${3} ${4} ${5} ${6}/g" ${BAYAN_PATH}/conn.lst
        ip route replace default via ${3} dev ${4} table ${2}
        iptables -t mangle -R PREROUTING ${2} -i ${client_if} -m conntrack --ctstate     NEW -m statistic --mode random --probability ${5} -j MARK${2}
    ;;

    "show")
        conn_cnt=$(iptables -t nat -nvL | grep -c "Chain MARK")
        conn_id=1
        for conn in $(seq 1 $conn_cnt)
            do
            conn_ip=$(ip route show table ${conn} | grep "default via" | awk '{print $3}')
            prob=$(iptables -t mangle -nvL | grep "MARK${conn}.*probability" | awk '{print $NF}')
            echo "${conn_id}: ${conn}   ${conn_ip}      ${prob}"
            conn_id=$(( conn_id + 1 ))
        done
    ;;

    *)
        echo "You have failed to specify what to do correctly."
        exit 1
        ;;
esac
